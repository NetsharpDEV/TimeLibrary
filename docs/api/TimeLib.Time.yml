### YamlMime:ManagedReference
items:
- uid: TimeLib.Time
  commentId: T:TimeLib.Time
  id: Time
  parent: TimeLib
  children:
  - TimeLib.Time.#ctor(System.Byte)
  - TimeLib.Time.#ctor(System.Byte,System.Byte)
  - TimeLib.Time.#ctor(System.Byte,System.Byte,System.Byte)
  - TimeLib.Time.#ctor(System.String)
  - TimeLib.Time.Add(TimeLib.TimePeriod)
  - TimeLib.Time.CompareTo(TimeLib.Time)
  - TimeLib.Time.Equals(System.Object)
  - TimeLib.Time.Equals(TimeLib.Time)
  - TimeLib.Time.Hours
  - TimeLib.Time.Minutes
  - TimeLib.Time.op_Addition(TimeLib.Time,TimeLib.Time)
  - TimeLib.Time.op_Equality(TimeLib.Time,TimeLib.Time)
  - TimeLib.Time.op_GreaterThan(TimeLib.Time,TimeLib.Time)
  - TimeLib.Time.op_GreaterThanOrEqual(TimeLib.Time,TimeLib.Time)
  - TimeLib.Time.op_Inequality(TimeLib.Time,TimeLib.Time)
  - TimeLib.Time.op_LessThan(TimeLib.Time,TimeLib.Time)
  - TimeLib.Time.op_LessThanOrEqual(TimeLib.Time,TimeLib.Time)
  - TimeLib.Time.op_Subtraction(TimeLib.Time,TimeLib.Time)
  - TimeLib.Time.Seconds
  - TimeLib.Time.Substract(TimeLib.TimePeriod)
  - TimeLib.Time.ToString
  langs:
  - csharp
  - vb
  name: Time
  nameWithType: Time
  fullName: TimeLib.Time
  type: Struct
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: Time
    path: src/Time.cs
    startLine: 9
  assemblies:
  - TimeLib
  namespace: TimeLib
  syntax:
    content: 'public struct Time : IEquatable<Time>, IComparable<Time>'
    content.vb: >-
      Public Structure Time

          Implements IEquatable(Of Time), IComparable(Of Time)
  implements:
  - System.IEquatable{TimeLib.Time}
  - System.IComparable{TimeLib.Time}
  inheritedMembers:
  - System.ValueType.GetHashCode
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: TimeLib.Time.#ctor(System.String)
  commentId: M:TimeLib.Time.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: Time(String)
  nameWithType: Time.Time(String)
  fullName: TimeLib.Time.Time(System.String)
  type: Constructor
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: .ctor
    path: src/Time.cs
    startLine: 25
  assemblies:
  - TimeLib
  namespace: TimeLib
  summary: "\nCreate time from string.\n"
  example: []
  syntax:
    content: public Time(string time)
    parameters:
    - id: time
      type: System.String
      description: Format HH:mm:ss.
    content.vb: Public Sub New(time As String)
  overload: TimeLib.Time.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeLib.Time.#ctor(System.Byte)
  commentId: M:TimeLib.Time.#ctor(System.Byte)
  id: '#ctor(System.Byte)'
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: Time(Byte)
  nameWithType: Time.Time(Byte)
  fullName: TimeLib.Time.Time(System.Byte)
  type: Constructor
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: .ctor
    path: src/Time.cs
    startLine: 43
  assemblies:
  - TimeLib
  namespace: TimeLib
  syntax:
    content: public Time(byte hour)
    parameters:
    - id: hour
      type: System.Byte
    content.vb: Public Sub New(hour As Byte)
  overload: TimeLib.Time.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeLib.Time.#ctor(System.Byte,System.Byte)
  commentId: M:TimeLib.Time.#ctor(System.Byte,System.Byte)
  id: '#ctor(System.Byte,System.Byte)'
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: Time(Byte, Byte)
  nameWithType: Time.Time(Byte, Byte)
  fullName: TimeLib.Time.Time(System.Byte, System.Byte)
  type: Constructor
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: .ctor
    path: src/Time.cs
    startLine: 45
  assemblies:
  - TimeLib
  namespace: TimeLib
  syntax:
    content: public Time(byte hour, byte minute)
    parameters:
    - id: hour
      type: System.Byte
    - id: minute
      type: System.Byte
    content.vb: Public Sub New(hour As Byte, minute As Byte)
  overload: TimeLib.Time.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeLib.Time.#ctor(System.Byte,System.Byte,System.Byte)
  commentId: M:TimeLib.Time.#ctor(System.Byte,System.Byte,System.Byte)
  id: '#ctor(System.Byte,System.Byte,System.Byte)'
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: Time(Byte, Byte, Byte)
  nameWithType: Time.Time(Byte, Byte, Byte)
  fullName: TimeLib.Time.Time(System.Byte, System.Byte, System.Byte)
  type: Constructor
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: .ctor
    path: src/Time.cs
    startLine: 47
  assemblies:
  - TimeLib
  namespace: TimeLib
  syntax:
    content: public Time(byte hour, byte minute, byte second)
    parameters:
    - id: hour
      type: System.Byte
    - id: minute
      type: System.Byte
    - id: second
      type: System.Byte
    content.vb: Public Sub New(hour As Byte, minute As Byte, second As Byte)
  overload: TimeLib.Time.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeLib.Time.Hours
  commentId: P:TimeLib.Time.Hours
  id: Hours
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: Hours
  nameWithType: Time.Hours
  fullName: TimeLib.Time.Hours
  type: Property
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: Hours
    path: src/Time.cs
    startLine: 63
  assemblies:
  - TimeLib
  namespace: TimeLib
  summary: "\nHours.\n"
  example: []
  syntax:
    content: public byte Hours { get; }
    parameters: []
    return:
      type: System.Byte
    content.vb: Public ReadOnly Property Hours As Byte
  overload: TimeLib.Time.Hours*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeLib.Time.Minutes
  commentId: P:TimeLib.Time.Minutes
  id: Minutes
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: Minutes
  nameWithType: Time.Minutes
  fullName: TimeLib.Time.Minutes
  type: Property
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: Minutes
    path: src/Time.cs
    startLine: 68
  assemblies:
  - TimeLib
  namespace: TimeLib
  summary: "\nMinutes.\n"
  example: []
  syntax:
    content: public byte Minutes { get; }
    parameters: []
    return:
      type: System.Byte
    content.vb: Public ReadOnly Property Minutes As Byte
  overload: TimeLib.Time.Minutes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeLib.Time.Seconds
  commentId: P:TimeLib.Time.Seconds
  id: Seconds
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: Seconds
  nameWithType: Time.Seconds
  fullName: TimeLib.Time.Seconds
  type: Property
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: Seconds
    path: src/Time.cs
    startLine: 73
  assemblies:
  - TimeLib
  namespace: TimeLib
  summary: "\nSeconds.\n"
  example: []
  syntax:
    content: public byte Seconds { get; }
    parameters: []
    return:
      type: System.Byte
    content.vb: Public ReadOnly Property Seconds As Byte
  overload: TimeLib.Time.Seconds*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TimeLib.Time.ToString
  commentId: M:TimeLib.Time.ToString
  id: ToString
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Time.ToString()
  fullName: TimeLib.Time.ToString()
  type: Method
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: ToString
    path: src/Time.cs
    startLine: 79
  assemblies:
  - TimeLib
  namespace: TimeLib
  summary: "\nConvert structure into string.\n"
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: Returns formatted time HH:mm:ss.
    content.vb: Public Overrides Function ToString As String
  overridden: System.ValueType.ToString
  overload: TimeLib.Time.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TimeLib.Time.Equals(TimeLib.Time)
  commentId: M:TimeLib.Time.Equals(TimeLib.Time)
  id: Equals(TimeLib.Time)
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: Equals(Time)
  nameWithType: Time.Equals(Time)
  fullName: TimeLib.Time.Equals(TimeLib.Time)
  type: Method
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: Equals
    path: src/Time.cs
    startLine: 89
  assemblies:
  - TimeLib
  namespace: TimeLib
  summary: "\nCompare time to other time structure.\n"
  example: []
  syntax:
    content: public bool Equals(Time other)
    parameters:
    - id: other
      type: TimeLib.Time
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function Equals(other As Time) As Boolean
  overload: TimeLib.Time.Equals*
  implements:
  - System.IEquatable{TimeLib.Time}.Equals(TimeLib.Time)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeLib.Time.Equals(System.Object)
  commentId: M:TimeLib.Time.Equals(System.Object)
  id: Equals(System.Object)
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Time.Equals(Object)
  fullName: TimeLib.Time.Equals(System.Object)
  type: Method
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: Equals
    path: src/Time.cs
    startLine: 98
  assemblies:
  - TimeLib
  namespace: TimeLib
  summary: "\nCompare structure to other object.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: TimeLib.Time.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: TimeLib.Time.CompareTo(TimeLib.Time)
  commentId: M:TimeLib.Time.CompareTo(TimeLib.Time)
  id: CompareTo(TimeLib.Time)
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: CompareTo(Time)
  nameWithType: Time.CompareTo(Time)
  fullName: TimeLib.Time.CompareTo(TimeLib.Time)
  type: Method
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: CompareTo
    path: src/Time.cs
    startLine: 109
  assemblies:
  - TimeLib
  namespace: TimeLib
  summary: "\nCompare one time instance to another.\n"
  example: []
  syntax:
    content: public int CompareTo(Time other)
    parameters:
    - id: other
      type: TimeLib.Time
      description: Structure to compare.
    return:
      type: System.Int32
      description: 1 if base time is greater, 0 if base time is equal to other and -1 if time is smaller than other.
    content.vb: Public Function CompareTo(other As Time) As Integer
  overload: TimeLib.Time.CompareTo*
  implements:
  - System.IComparable{TimeLib.Time}.CompareTo(TimeLib.Time)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeLib.Time.op_Equality(TimeLib.Time,TimeLib.Time)
  commentId: M:TimeLib.Time.op_Equality(TimeLib.Time,TimeLib.Time)
  id: op_Equality(TimeLib.Time,TimeLib.Time)
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: Equality(Time, Time)
  nameWithType: Time.Equality(Time, Time)
  fullName: TimeLib.Time.Equality(TimeLib.Time, TimeLib.Time)
  type: Operator
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: op_Equality
    path: src/Time.cs
    startLine: 144
  assemblies:
  - TimeLib
  namespace: TimeLib
  summary: "\nCheck if time1 is equal to time2.\n"
  example: []
  syntax:
    content: public static bool operator ==(Time time1, Time time2)
    parameters:
    - id: time1
      type: TimeLib.Time
      description: ''
    - id: time2
      type: TimeLib.Time
      description: ''
    return:
      type: System.Boolean
      description: True if both instances are equal.
    content.vb: Public Shared Operator =(time1 As Time, time2 As Time) As Boolean
  overload: TimeLib.Time.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeLib.Time.op_Inequality(TimeLib.Time,TimeLib.Time)
  commentId: M:TimeLib.Time.op_Inequality(TimeLib.Time,TimeLib.Time)
  id: op_Inequality(TimeLib.Time,TimeLib.Time)
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: Inequality(Time, Time)
  nameWithType: Time.Inequality(Time, Time)
  fullName: TimeLib.Time.Inequality(TimeLib.Time, TimeLib.Time)
  type: Operator
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: op_Inequality
    path: src/Time.cs
    startLine: 154
  assemblies:
  - TimeLib
  namespace: TimeLib
  summary: "\nCheck if time1 is not equal to time2.\n"
  example: []
  syntax:
    content: public static bool operator !=(Time time1, Time time2)
    parameters:
    - id: time1
      type: TimeLib.Time
      description: ''
    - id: time2
      type: TimeLib.Time
      description: ''
    return:
      type: System.Boolean
      description: True if both instances are not equal.
    content.vb: Public Shared Operator <>(time1 As Time, time2 As Time) As Boolean
  overload: TimeLib.Time.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeLib.Time.op_LessThan(TimeLib.Time,TimeLib.Time)
  commentId: M:TimeLib.Time.op_LessThan(TimeLib.Time,TimeLib.Time)
  id: op_LessThan(TimeLib.Time,TimeLib.Time)
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: LessThan(Time, Time)
  nameWithType: Time.LessThan(Time, Time)
  fullName: TimeLib.Time.LessThan(TimeLib.Time, TimeLib.Time)
  type: Operator
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: op_LessThan
    path: src/Time.cs
    startLine: 164
  assemblies:
  - TimeLib
  namespace: TimeLib
  summary: "\nCheck if time1 is smaller than time2.\n"
  example: []
  syntax:
    content: public static bool operator <(Time time1, Time time2)
    parameters:
    - id: time1
      type: TimeLib.Time
      description: ''
    - id: time2
      type: TimeLib.Time
      description: ''
    return:
      type: System.Boolean
      description: True if time1 is smaller than time2.
    content.vb: Public Shared Operator <(time1 As Time, time2 As Time) As Boolean
  overload: TimeLib.Time.op_LessThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeLib.Time.op_GreaterThan(TimeLib.Time,TimeLib.Time)
  commentId: M:TimeLib.Time.op_GreaterThan(TimeLib.Time,TimeLib.Time)
  id: op_GreaterThan(TimeLib.Time,TimeLib.Time)
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: GreaterThan(Time, Time)
  nameWithType: Time.GreaterThan(Time, Time)
  fullName: TimeLib.Time.GreaterThan(TimeLib.Time, TimeLib.Time)
  type: Operator
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: op_GreaterThan
    path: src/Time.cs
    startLine: 174
  assemblies:
  - TimeLib
  namespace: TimeLib
  summary: "\nCheck if time1 is greater than time2.\n"
  example: []
  syntax:
    content: public static bool operator>(Time time1, Time time2)
    parameters:
    - id: time1
      type: TimeLib.Time
      description: ''
    - id: time2
      type: TimeLib.Time
      description: ''
    return:
      type: System.Boolean
      description: True if time1 is greater than time2.
    content.vb: Public Shared Operator>(time1 As Time, time2 As Time) As Boolean
  overload: TimeLib.Time.op_GreaterThan*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeLib.Time.op_GreaterThanOrEqual(TimeLib.Time,TimeLib.Time)
  commentId: M:TimeLib.Time.op_GreaterThanOrEqual(TimeLib.Time,TimeLib.Time)
  id: op_GreaterThanOrEqual(TimeLib.Time,TimeLib.Time)
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Time, Time)
  nameWithType: Time.GreaterThanOrEqual(Time, Time)
  fullName: TimeLib.Time.GreaterThanOrEqual(TimeLib.Time, TimeLib.Time)
  type: Operator
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: op_GreaterThanOrEqual
    path: src/Time.cs
    startLine: 184
  assemblies:
  - TimeLib
  namespace: TimeLib
  summary: "\nCheck if time1 is is greater or equal to time2.\n"
  example: []
  syntax:
    content: public static bool operator >=(Time time1, Time time2)
    parameters:
    - id: time1
      type: TimeLib.Time
      description: ''
    - id: time2
      type: TimeLib.Time
      description: ''
    return:
      type: System.Boolean
      description: True if time1 is greater or equal to time2.
    content.vb: Public Shared Operator >=(time1 As Time, time2 As Time) As Boolean
  overload: TimeLib.Time.op_GreaterThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeLib.Time.op_LessThanOrEqual(TimeLib.Time,TimeLib.Time)
  commentId: M:TimeLib.Time.op_LessThanOrEqual(TimeLib.Time,TimeLib.Time)
  id: op_LessThanOrEqual(TimeLib.Time,TimeLib.Time)
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Time, Time)
  nameWithType: Time.LessThanOrEqual(Time, Time)
  fullName: TimeLib.Time.LessThanOrEqual(TimeLib.Time, TimeLib.Time)
  type: Operator
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: op_LessThanOrEqual
    path: src/Time.cs
    startLine: 194
  assemblies:
  - TimeLib
  namespace: TimeLib
  summary: "\nCheck if time1 is is smaller or equal to time2.\n"
  example: []
  syntax:
    content: public static bool operator <=(Time time1, Time time2)
    parameters:
    - id: time1
      type: TimeLib.Time
      description: ''
    - id: time2
      type: TimeLib.Time
      description: ''
    return:
      type: System.Boolean
      description: True if time1 is smaller or equal to time2.
    content.vb: Public Shared Operator <=(time1 As Time, time2 As Time) As Boolean
  overload: TimeLib.Time.op_LessThanOrEqual*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeLib.Time.op_Addition(TimeLib.Time,TimeLib.Time)
  commentId: M:TimeLib.Time.op_Addition(TimeLib.Time,TimeLib.Time)
  id: op_Addition(TimeLib.Time,TimeLib.Time)
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: Addition(Time, Time)
  nameWithType: Time.Addition(Time, Time)
  fullName: TimeLib.Time.Addition(TimeLib.Time, TimeLib.Time)
  type: Operator
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: op_Addition
    path: src/Time.cs
    startLine: 204
  assemblies:
  - TimeLib
  namespace: TimeLib
  summary: "\nAdd time to time.\n"
  example: []
  syntax:
    content: public static Time operator +(Time time1, Time time2)
    parameters:
    - id: time1
      type: TimeLib.Time
      description: ''
    - id: time2
      type: TimeLib.Time
      description: ''
    return:
      type: TimeLib.Time
      description: Returns new time instance. When sum exceeds 24:00:00 it returns maximum 24:00:00.
    content.vb: Public Shared Operator +(time1 As Time, time2 As Time) As Time
  overload: TimeLib.Time.op_Addition*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeLib.Time.op_Subtraction(TimeLib.Time,TimeLib.Time)
  commentId: M:TimeLib.Time.op_Subtraction(TimeLib.Time,TimeLib.Time)
  id: op_Subtraction(TimeLib.Time,TimeLib.Time)
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: Subtraction(Time, Time)
  nameWithType: Time.Subtraction(Time, Time)
  fullName: TimeLib.Time.Subtraction(TimeLib.Time, TimeLib.Time)
  type: Operator
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: op_Subtraction
    path: src/Time.cs
    startLine: 215
  assemblies:
  - TimeLib
  namespace: TimeLib
  syntax:
    content: public static Time operator -(Time time1, Time time2)
    parameters:
    - id: time1
      type: TimeLib.Time
    - id: time2
      type: TimeLib.Time
    return:
      type: TimeLib.Time
    content.vb: Public Shared Operator -(time1 As Time, time2 As Time) As Time
  overload: TimeLib.Time.op_Subtraction*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TimeLib.Time.Add(TimeLib.TimePeriod)
  commentId: M:TimeLib.Time.Add(TimeLib.TimePeriod)
  id: Add(TimeLib.TimePeriod)
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: Add(TimePeriod)
  nameWithType: Time.Add(TimePeriod)
  fullName: TimeLib.Time.Add(TimeLib.TimePeriod)
  type: Method
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: Add
    path: src/Time.cs
    startLine: 233
  assemblies:
  - TimeLib
  namespace: TimeLib
  summary: "\nAdd time period to time.\n"
  example: []
  syntax:
    content: public Time Add(TimePeriod timePeriod)
    parameters:
    - id: timePeriod
      type: TimeLib.TimePeriod
      description: ''
    return:
      type: TimeLib.Time
      description: Returns new time instance. When sum exceeds 24:00:00 it returns maximum 24:00:00.
    content.vb: Public Function Add(timePeriod As TimePeriod) As Time
  overload: TimeLib.Time.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: TimeLib.Time.Substract(TimeLib.TimePeriod)
  commentId: M:TimeLib.Time.Substract(TimeLib.TimePeriod)
  id: Substract(TimeLib.TimePeriod)
  parent: TimeLib.Time
  langs:
  - csharp
  - vb
  name: Substract(TimePeriod)
  nameWithType: Time.Substract(TimePeriod)
  fullName: TimeLib.Time.Substract(TimeLib.TimePeriod)
  type: Method
  source:
    remote:
      path: TimeLib/src/Time.cs
      branch: documentation
      repo: git@github.com:NetsharpDEV/TimeLibrary.git
    id: Substract
    path: src/Time.cs
    startLine: 248
  assemblies:
  - TimeLib
  namespace: TimeLib
  summary: "\nSubstract specific time period from time.\n"
  example: []
  syntax:
    content: public Time Substract(TimePeriod timePeriod)
    parameters:
    - id: timePeriod
      type: TimeLib.TimePeriod
      description: ''
    return:
      type: TimeLib.Time
      description: Returns new time instance.
    content.vb: Public Function Substract(timePeriod As TimePeriod) As Time
  overload: TimeLib.Time.Substract*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: TimeLib
  commentId: N:TimeLib
  name: TimeLib
  nameWithType: TimeLib
  fullName: TimeLib
- uid: System.IEquatable{TimeLib.Time}
  commentId: T:System.IEquatable{TimeLib.Time}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Time>
  nameWithType: IEquatable<Time>
  fullName: System.IEquatable<TimeLib.Time>
  nameWithType.vb: IEquatable(Of Time)
  fullName.vb: System.IEquatable(Of TimeLib.Time)
  name.vb: IEquatable(Of Time)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeLib.Time
    name: Time
    nameWithType: Time
    fullName: TimeLib.Time
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeLib.Time
    name: Time
    nameWithType: Time
    fullName: TimeLib.Time
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable{TimeLib.Time}
  commentId: T:System.IComparable{TimeLib.Time}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Time>
  nameWithType: IComparable<Time>
  fullName: System.IComparable<TimeLib.Time>
  nameWithType.vb: IComparable(Of Time)
  fullName.vb: System.IComparable(Of TimeLib.Time)
  name.vb: IComparable(Of Time)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeLib.Time
    name: Time
    nameWithType: Time
    fullName: TimeLib.Time
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeLib.Time
    name: Time
    nameWithType: Time
    fullName: TimeLib.Time
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: true
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullName.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TimeLib.Time.#ctor*
  commentId: Overload:TimeLib.Time.#ctor
  name: Time
  nameWithType: Time.Time
  fullName: TimeLib.Time.Time
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: TimeLib.Time.Hours*
  commentId: Overload:TimeLib.Time.Hours
  name: Hours
  nameWithType: Time.Hours
  fullName: TimeLib.Time.Hours
- uid: TimeLib.Time.Minutes*
  commentId: Overload:TimeLib.Time.Minutes
  name: Minutes
  nameWithType: Time.Minutes
  fullName: TimeLib.Time.Minutes
- uid: TimeLib.Time.Seconds*
  commentId: Overload:TimeLib.Time.Seconds
  name: Seconds
  nameWithType: Time.Seconds
  fullName: TimeLib.Time.Seconds
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeLib.Time.ToString*
  commentId: Overload:TimeLib.Time.ToString
  name: ToString
  nameWithType: Time.ToString
  fullName: TimeLib.Time.ToString
- uid: TimeLib.Time.Equals*
  commentId: Overload:TimeLib.Time.Equals
  name: Equals
  nameWithType: Time.Equals
  fullName: TimeLib.Time.Equals
- uid: System.IEquatable{TimeLib.Time}.Equals(TimeLib.Time)
  commentId: M:System.IEquatable{TimeLib.Time}.Equals(TimeLib.Time)
  parent: System.IEquatable{TimeLib.Time}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Time)
  nameWithType: IEquatable<Time>.Equals(Time)
  fullName: System.IEquatable<TimeLib.Time>.Equals(TimeLib.Time)
  nameWithType.vb: IEquatable(Of Time).Equals(Time)
  fullName.vb: System.IEquatable(Of TimeLib.Time).Equals(TimeLib.Time)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Time>.Equals
    fullName: System.IEquatable<TimeLib.Time>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeLib.Time
    name: Time
    nameWithType: Time
    fullName: TimeLib.Time
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Time).Equals
    fullName: System.IEquatable(Of TimeLib.Time).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeLib.Time
    name: Time
    nameWithType: Time
    fullName: TimeLib.Time
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeLib.Time
  commentId: T:TimeLib.Time
  parent: TimeLib
  name: Time
  nameWithType: Time
  fullName: TimeLib.Time
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeLib.Time.CompareTo*
  commentId: Overload:TimeLib.Time.CompareTo
  name: CompareTo
  nameWithType: Time.CompareTo
  fullName: TimeLib.Time.CompareTo
- uid: System.IComparable{TimeLib.Time}.CompareTo(TimeLib.Time)
  commentId: M:System.IComparable{TimeLib.Time}.CompareTo(TimeLib.Time)
  parent: System.IComparable{TimeLib.Time}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Time)
  nameWithType: IComparable<Time>.CompareTo(Time)
  fullName: System.IComparable<TimeLib.Time>.CompareTo(TimeLib.Time)
  nameWithType.vb: IComparable(Of Time).CompareTo(Time)
  fullName.vb: System.IComparable(Of TimeLib.Time).CompareTo(TimeLib.Time)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<Time>.CompareTo
    fullName: System.IComparable<TimeLib.Time>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeLib.Time
    name: Time
    nameWithType: Time
    fullName: TimeLib.Time
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of Time).CompareTo
    fullName: System.IComparable(Of TimeLib.Time).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: TimeLib.Time
    name: Time
    nameWithType: Time
    fullName: TimeLib.Time
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: true
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullName.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: TimeLib.Time.op_Equality*
  commentId: Overload:TimeLib.Time.op_Equality
  name: Equality
  nameWithType: Time.Equality
  fullName: TimeLib.Time.Equality
- uid: TimeLib.Time.op_Inequality*
  commentId: Overload:TimeLib.Time.op_Inequality
  name: Inequality
  nameWithType: Time.Inequality
  fullName: TimeLib.Time.Inequality
- uid: TimeLib.Time.op_LessThan*
  commentId: Overload:TimeLib.Time.op_LessThan
  name: LessThan
  nameWithType: Time.LessThan
  fullName: TimeLib.Time.LessThan
- uid: TimeLib.Time.op_GreaterThan*
  commentId: Overload:TimeLib.Time.op_GreaterThan
  name: GreaterThan
  nameWithType: Time.GreaterThan
  fullName: TimeLib.Time.GreaterThan
- uid: TimeLib.Time.op_GreaterThanOrEqual*
  commentId: Overload:TimeLib.Time.op_GreaterThanOrEqual
  name: GreaterThanOrEqual
  nameWithType: Time.GreaterThanOrEqual
  fullName: TimeLib.Time.GreaterThanOrEqual
- uid: TimeLib.Time.op_LessThanOrEqual*
  commentId: Overload:TimeLib.Time.op_LessThanOrEqual
  name: LessThanOrEqual
  nameWithType: Time.LessThanOrEqual
  fullName: TimeLib.Time.LessThanOrEqual
- uid: TimeLib.Time.op_Addition*
  commentId: Overload:TimeLib.Time.op_Addition
  name: Addition
  nameWithType: Time.Addition
  fullName: TimeLib.Time.Addition
- uid: TimeLib.Time.op_Subtraction*
  commentId: Overload:TimeLib.Time.op_Subtraction
  name: Subtraction
  nameWithType: Time.Subtraction
  fullName: TimeLib.Time.Subtraction
- uid: TimeLib.Time.Add*
  commentId: Overload:TimeLib.Time.Add
  name: Add
  nameWithType: Time.Add
  fullName: TimeLib.Time.Add
- uid: TimeLib.TimePeriod
  commentId: T:TimeLib.TimePeriod
  parent: TimeLib
  name: TimePeriod
  nameWithType: TimePeriod
  fullName: TimeLib.TimePeriod
- uid: TimeLib.Time.Substract*
  commentId: Overload:TimeLib.Time.Substract
  name: Substract
  nameWithType: Time.Substract
  fullName: TimeLib.Time.Substract
